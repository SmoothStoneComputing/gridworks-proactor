name: Tests

on:
  - push
  - pull_request

jobs:
  tests:
    name: ${{ matrix.session }} ${{ matrix.python }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - { python: "3.11", os: "ubuntu-latest", session: "pre-commit" }
          #          - { python: "3.11", os: "ubuntu-latest", session: "mypy" }
          - { python: "3.11", os: "ubuntu-latest", session: "tests" }
          # - { python: "3.10", os: "ubuntu-latest", session: "tests" }
          #           - { python: "3.11", os: "windows-latest", session: "tests" }
          #           - { python: "3.11", os: "macos-latest", session: "tests" }
          #           - { python: "3.11", os: "ubuntu-latest", session: "typeguard" }
          # - { python: "3.11", os: "ubuntu-latest", session: "xdoctest" }
          # - { python: "3.11", os: "ubuntu-latest", session: "docs-build" }

    env:
      NOXSESSION: ${{ matrix.session }}
      FORCE_COLOR: "1"
      PRE_COMMIT_COLOR: "always"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4.7.0
        with:
          python-version: ${{ matrix.python }}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Upgrade pip in virtual environments
        shell: python
        run: |
          import os
          import pip

          with open(os.environ["GITHUB_ENV"], mode="a") as io:
              print(f"VIRTUALENV_PIP={pip.__version__}", file=io)

      - name: Install gwcert
        run: |
          pipx install gridworks-cert
          gwcert --version

      - name: Generate CA
        run: |
          gwcert ca create ci-test-ca
          gwcert ca info
          gwcert key add --dns localhost mosquitto
          gwcert key add ci
          gwcert ca info
          ls -lR /home/runner/.local/share/gridworks/ca/
          sudo chmod a+r ls -lR /home/runner/.local/share/gridworks/ca/certs/mosquitto/private/mosquitto.pem
          ls -lR /home/runner/.local/share/gridworks/ca/

      - name: Start 'Local' Mosquitto
        uses: namoshek/mosquitto-github-action@v1.1.0
        with:
          ports: "1883:1883 8883:8883"
          config: ${{ github.workspace }}/tests/config/local_mosquitto.conf
          certificates: /home/runner/.local/share/gridworks/ca
          container-name: "local-mqtt"

      #      - name: Install Mosquitto Clients
      #        run: |
      #          sudo apt-get install mosquitto-clients

      - name: Wait for Mosquitto
        uses: iFaxity/wait-on-action@v1.1.0
        with:
          resource: tcp:localhost:1883
          timeout: 5000

      #      - name: try mosquitto
      #        run: |
      #          echo pub clear
      #          mosquitto_pub -h localhost -p 1883 -t foo -m '{"bla":1}'
      #          echo sub clear
      #          mosquitto_sub -h localhost -p 1883 -t foo -E
      #          echo pub TLS
      #          mosquitto_pub -h localhost -p 8883 -t foo \
      #                --cafile /home/runner/.local/share/gridworks/ca/ca.crt \
      #                --cert /home/runner/.local/share/gridworks/ca/certs/ci/ci.crt \
      #                --key /home/runner/.local/share/gridworks/ca/certs/ci/private/ci.pem \
      #                -m '{"bar":1}'
      #          echo sub TLS
      #          mosquitto_sub -h localhost -p 8883 -t foo \
      #                --cafile /home/runner/.local/share/gridworks/ca/ca.crt \
      #                --cert /home/runner/.local/share/gridworks/ca/certs/ci/ci.crt \
      #                --key /home/runner/.local/share/gridworks/ca/certs/ci/private/ci.pem \
      #                -E

      - name: Mosquitto Log
        if: always()
        run: |
          docker logs local-mqtt

#      - name: Install Poetry
#        run: |
#          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
#          poetry --version
#
#      - name: Install Nox
#        run: |
#          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
#          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
#          nox --version
#
#      - name: Compute pre-commit cache key
#        if: matrix.session == 'pre-commit'
#        id: pre-commit-cache
#        shell: python
#        run: |
#          import hashlib
#          import sys
#
#          python = "py{}.{}".format(*sys.version_info[:2])
#          payload = sys.version.encode() + sys.executable.encode()
#          digest = hashlib.sha256(payload).hexdigest()
#          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])
#
#          print("::set-output name=result::{}".format(result))
#
#      - name: Restore pre-commit cache
#        uses: actions/cache@v3
#        if: matrix.session == 'pre-commit'
#        with:
#          path: ~/.cache/pre-commit
#          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
#          restore-keys: |
#            ${{ steps.pre-commit-cache.outputs.result }}-
#
#      - name: Run Nox
#        run: |
#          # nox --python=${{ matrix.python }}
#          nox -s tests-3.11 -- -k test_no_parent -s

#      - name: Upload coverage data
#        if: always() && matrix.session == 'tests'
#        uses: "actions/upload-artifact@v3"
#        with:
#          name: coverage-data
#          path: ".coverage.*"

#      - name: Upload documentation
#        if: matrix.session == 'docs-build'
#        uses: actions/upload-artifact@v3
#        with:
#          name: docs
#          path: docs/_build

#  coverage:
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#      - name: Check out the repository
#        uses: actions/checkout@v3
#
#      - name: Start 'Local' Mosquitto
#        uses: namoshek/mosquitto-github-action@v1
#        with:
#          version: "1.6"
#          ports: "1883:1883 8883:8883"
#          config: ${{ github.workspace }}/tests/config/local_mosquitto.conf
#          container-name: "local-mqtt"
#
#      - name: Set up Python
#        uses: actions/setup-python@v4.7.0
#        with:
#          python-version: "3.11"
#
#      - name: Upgrade pip
#        run: |
#          pip install --constraint=.github/workflows/constraints.txt pip
#          pip --version
#
#      - name: Install Poetry
#        run: |
#          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
#          poetry --version
#
#      - name: Install Nox
#        run: |
#          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
#          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
#          nox --version
#
#      - name: Download coverage data
#        uses: actions/download-artifact@v3
#        with:
#          name: coverage-data
#
#      - name: Combine coverage data and display human readable report
#        run: |
#          nox --session=coverage
#
#      - name: Create coverage report
#        run: |
#          nox --session=coverage -- xml
#
#      - name: Upload coverage report
#        uses: codecov/codecov-action@v3.1.4
